/*
localhost -dir=/home/supriya/snappy/server1
localhost -dir=/home/supriya/snappy/server2
localhost -dir=/home/supriya/snappy/server3 -J-Dgemfire.DISALLOW_CLUSTER_RESTART_CHECK=true
localhost -dir=/home/supriya/snappy/server4 -J-Dgemfire.DISALLOW_CLUSTER_RESTART_CHECK=true
*/
hydra.Prms-testRequirement = "Test to verify, dataExtractor feature in ConflictingPersistentDataException(CPDE) case.";
hydra.Prms-testDescription = "The test starts a normal cluster with 2 servers a lead and a locator ,creates
partitioned row, replicated row and column tables and populates it.Then the cluster is stopped  and started again
with same locator and lead ,but 2 different servers ,create tables and populate it .Now stop the cluster and
start it with same locator,lead and all 4 servers ,CPDE is seen and 2 servers fail to start .Stop the cluster
and restart it in recovery mode. After the cluster is started in recovery mode, validation is done to see if
tables have all the data and the data is correct.";

 INCLUDE $JTESTS/io/snappydata/hydra/northwind/startEmbeddedModeCluster.conf;

 INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
             io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = ${scriptName}
           //  io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
             threadGroups = snappyThreads;

//Do dmloperations.
 INITTASK   taskClass   = io.snappydata.hydra.dataExtractorTool.DataExtractorToolTest taskMethod  = HydraTask_executeQuery
           io.snappydata.hydra.security.SnappySecurityPrms-dataLocation = ${dmlOpsFileLocation}
           threadGroups = snappyThreads;

 // Take table count
 INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_storeDataCount
             io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${queryPath1}
             io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isBeforeRestart = true
             threadGroups = snappyThreads;

 //Stop the cluster
INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyCluster
            threadGroups = snappyThreads;

 // Modify and start the cluster
 INITTASK    taskClass   = io.snappydata.hydra.dataExtractorTool.DataExtractorToolTest taskMethod  = HydraTask_modifyConf
              io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyBinPath}
              io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName= ${node1} ${node2}
              io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeInfoForHA = " -heap-size=4g -memory-size=4g -J-Dgemfire.DISALLOW_CLUSTER_RESTART_CHECK=true "
              threadGroups = snappyThreads;

// create and load data in the new servers started.
 INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
             io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = ${scriptName1}
           //  io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
             threadGroups = snappyThreads;

  // Take table count
  INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_storeDataCount
              io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${queryPath}
              io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isBeforeRestart = true
              threadGroups = snappyThreads;

 //Stop the cluster
INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyCluster
            threadGroups = snappyThreads;

 // Modify and start the cluster
 INITTASK    taskClass   = io.snappydata.hydra.dataExtractorTool.DataExtractorToolTest taskMethod  = HydraTask_modifyConf
             io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyBinPath}
             io.snappydata.hydra.dataExtractorTool.SnappyDataExtractorToolTestPrms-isStartClusterForCPDE = true
             threadGroups = snappyThreads;

 //Stop the cluster
INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyCluster
              threadGroups = snappyThreads;


INCLUDE $JTESTS/io/snappydata/hydra/dataExtractorTool/dataExtractorToolStartStopCluster.conf;

//Execute the extracted DDLs and then load data using the saved data in parquet format
INCLUDE $JTESTS/io/snappydata/hydra/dataExtractorTool/dataExtractorRestoreData.conf;

INCLUDE $JTESTS/io/snappydata/hydra/northwind/stopEmbeddedModeCluster.conf;

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-shufflePartitions = 6;
io.snappydata.hydra.cluster.SnappyPrms-serverLauncherProps = " -heap-size=4g -memory-size=4g ";