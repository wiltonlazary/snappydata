hydra.Prms-testRequirement = "Test to verify, dataExtractor feature when nodes are down with OOME.";
 hydra.Prms-testDescription = "The test starts a normal cluster ,creates tables and populates it,
 at the same time, submit a job that introduces OOME in all of the server nodes.
  Then the cluster is stopped and restarted in recovery mode.
  After the cluster is started in recovery mode, full resultset validation is done.";

 INCLUDE $JTESTS/io/snappydata/hydra/northwind/startEmbeddedModeCluster.conf;

 INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
             io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = ${scriptName}
             //io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
             threadGroups = snappyThreads;

//Populate column table
TASK        taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = ${scriptName1}
            threadGroups = snappyThreads
            maxTimesToRun = 2
            maxThreads = 1;

//Populate row table
TASK        taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = ${scriptName2}
            threadGroups = snappyStoreThreads
            maxTimesToRun = 2
            maxThreads = 1;

//Execute job to introduce OOME
TASK       taskClass   = io.snappydata.hydra.dataExtractorTool.DataExtractorToolTest taskMethod  = HydraTask_createDummyData
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.hydra.dataExtractorTool.DataExtractorTestOOM
            io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar
            threadGroups = snappyStoreThreads
            maxThreads = 1
            maxTimesToRun = 1
            ;

//Check for OOME at regular interval
TASK        taskClass   = io.snappydata.hydra.dataExtractorTool.DataExtractorToolTest taskMethod  = HydraTask_checkForException
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyBinPath}
            threadGroups = locatorThreads
            startInterval = 300 //after 5mins
            endInterval   = 300
            maxTimesToRun = 4
            maxThreads = 1;

 //Stop the normal cluster and start it in recovery mode.
 CLOSETASK   taskClass   = io.snappydata.hydra.dataExtractorTool.DataExtractorToolTest taskMethod  = HydraTask_startClusterInRecoveryMode
             io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyBinPath}
             threadGroups = snappyThreads;

 CLOSETASK   taskClass   = io.snappydata.hydra.dataExtractorTool.DataExtractorToolTest taskMethod  = HydraTask_ExtractData
             io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${extractedDDLPath} ${extractedDataPath}
             threadGroups = snappyThreads;

  // Take table count in recovery mode
 CLOSETASK   taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_storeDataCount
              io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isBeforeRestart = true
              io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${queryPath}
              threadGroups = snappyThreads;

 CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyCluster
             threadGroups = snappyThreads;

 CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_startSnappyCluster
             threadGroups = snappyThreads;

 // Validate table data in normal mode
 CLOSETASK   taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_validateDataCount
             io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${queryPath}
             threadGroups = snappyThreads;


INCLUDE $JTESTS/io/snappydata/hydra/northwind/stopEmbeddedModeCluster.conf;

hydra.Prms-maxResultWaitSec = 3600; // 1hr
hydra.Prms-totalTaskTimeSec = 3600; // 1hr
io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-shufflePartitions = 6;
io.snappydata.hydra.cluster.SnappyPrms-serverLauncherProps = " -heap-size=4g -memory-size=4g ";

