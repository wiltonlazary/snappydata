hydra.Prms-testRequirement = "Test to verify snapshotIsolation for insert operation using test hook";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.GemFirePrms-names = gemfire1;
hydra.ClientPrms-gemfireNames = gemfire1;
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP selectThread
            totalThreads = fcn "((${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM})/2)" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP dmlThread
            totalThreads = fcn "((${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM})/2) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;


THREADGROUP locatorThreads
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;

THREADGROUP snappyThreads
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappyTest
  runMode = always
  threadGroups = snappyThreads, locatorThreads, selectThread;

INITTASK    taskClass   = io.snappydata.hydra.snapshotIsolation.SnapshotIsolationTest taskMethod = HydraTask_initialize
            threadGroups = selectThread,snappyThreads,locatorThreads;

INITTASK    taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
            threadGroups = snappyThreads, locatorThreads, selectThread;

INITTASK     taskClass   = io.snappydata.hydra.snapshotIsolation.SnapshotIsolationTest taskMethod  = HydraTask_initializeDMLThreads
	threadGroups = dmlThread;

INITTASK     taskClass   = io.snappydata.hydra.snapshotIsolation.SnapshotIsolationTest taskMethod = HydraTask_initializeSelectThreads
	threadGroups = selectThread;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLocatorConfig
    runMode = always
    threadGroups = locatorThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLocatorConfigData
    runMode = always
    threadGroups = snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLeadConfig
    runMode = always
    threadGroups = snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLeadConfigData
    runMode = always
    threadGroups = snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLocator
    runMode = always
    threadGroups = locatorThreads;

INITTASK        taskClass   = io.snappydata.hydra.snapshotIsolation.SnapshotIsolationWithTestHook taskMethod = HydraTask_startSnappyServerAPI
	threadGroups = selectThread;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLeader
    runMode = always
    threadGroups = snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.snapshotIsolation.SnapshotIsolationWithTestHook taskMethod  = HydraTask_createTableAndInitialize
	threadGroups = dmlThread;

INCLUDE $JTESTS/io/snappydata/hydra/snapshotIsolation/nw_schema.inc;

//task for running select queries
TASK        taskClass   = io.snappydata.hydra.snapshotIsolation.SnapshotIsolationWithTestHook taskMethod  = HydraTask_executeQueries
            maxThreads = 1
            threadGroups = selectThread;

//task for running dmlOps
TASK        taskClass   = io.snappydata.hydra.snapshotIsolation.SnapshotIsolationWithTestHook taskMethod  = HydraTask_performDMLOp
            threadGroups = dmlThread;

ENDTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyLeader
  clientNames = locator1;

ENDTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyLocator
  clientNames = locator1;

ENDTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cleanUpSnappyProcessesOnFailure
            clientNames = locator1;

/* end task must stop snappy members because they are not stopped by Hydra */
hydra.Prms-alwaysDoEndTasks = true;

hydra.Prms-totalTaskTimeSec           = 600;
hydra.Prms-maxResultWaitSec           = 600;

sql.SQLPrms-isSnappyTest = true;

io.snappydata.hydra.snapshotIsolation.SnapshotIsolationPrms-tablesList =
"app.orders"
;

io.snappydata.hydra.snapshotIsolation.SnapshotIsolationPrms-dmlOperations = ONEOF insert FOENO;

io.snappydata.hydra.snapshotIsolation.SnapshotIsolationPrms-dmlTables =
"app.orders"
;

io.snappydata.hydra.snapshotIsolation.SnapshotIsolationPrms-insertCsvFileNames =
"orders.csv"
;

io.snappydata.hydra.snapshotIsolation.SnapshotIsolationPrms-insertStmts =
"insert into app.orders values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
;

io.snappydata.hydra.snapshotIsolation.SnapshotIsolationPrms-selectStmts = ONEOF
"SELECT * FROM app.Orders"
FOENO
;

sql.SQLPrms-createTablesStatements =
"create table app.orders (OrderID int,CustomerID varchar(20),EmployeeID int,OrderDate timestamp,RequiredDate timestamp,ShippedDate timestamp,ShipVia int,Freight double,ShipName varchar(50),ShipAddress varchar(50),ShipCity varchar(15), ShipRegion varchar(20),ShipPostalCode varchar(10),ShipCountry varchar(20),tid int)"
;

