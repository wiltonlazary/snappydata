hydra.Prms-testRequirement = "Test to validate udf creation ";
hydra.Prms-testDescription = "The test will create function  and then access the created function in embedded
 and smart connector mode.
 The stop start the cluster and again access the already persisted functions in embedded and smart connector mode.
 Drop the functions and access it in embedded and smart connector mode but with expected exception .";

INCLUDE $JTESTS/io/snappydata/hydra/northwind/startDualModeCluster.conf;
io.snappydata.hydra.cluster.SnappyPrms-snappyPocJarPath="${jarPath}";

//create the user provided udfs.
INITTASK    taskClass = io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployTest taskMethod  = HydraTask_createFunction
            io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployPrms-udfName    = MyUDF3 MyUDF4 MyUDF5 MyUDF6 MyUDF7
            io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployPrms-returnType = Integer Float String Integer Integer
            threadGroups = snappyThreads
            ;

INITTASK    taskClass = io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployTest taskMethod  = HydraTask_executeUDFFunction
            io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployPrms-udfName = MyUDF3  MyUDF5 MyUDF4
            io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployPrms-isExpectedExecption = false
            threadGroups = snappyThreads
            ;

//Access them through snappy-job
 INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.hydra.deployPkgUDF.AccessUdfSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "udf1=MyUDF3,udf2=MyUDF4,udf3=MyUDF5,argNum=25,argStr=snappydata,isException=false"
            io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar
            threadGroups = snappyThreads;

//Access them through smart-connector mode
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSparkJob
            io.snappydata.hydra.cluster.SnappyPrms-sparkJobClassNames = io.snappydata.hydra.deployPkgUDF.AccessUdfSparkApp
            io.snappydata.hydra.cluster.SnappyPrms-userAppArgs = "MyUDF3 MyUDF4 MyUDF5 25 snappydata false"
            threadGroups = snappyThreads
            ;

//stop-start the cluster
INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyCluster
           threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_startSnappyCluster
            threadGroups = snappyThreads;

//Access the created functions again
//Access them through snappy-job

INITTASK    taskClass = io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployTest taskMethod  = HydraTask_executeUDFFunction
            io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployPrms-udfName = MyUDF3 MyUDF4 MyUDF5
            io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployPrms-isExpectedExecption = false
            threadGroups = leadThreads
            ;

 INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.hydra.deployPkgUDF.AccessUdfSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "udf1=MyUDF3,udf2=MyUDF4,udf3=MyUDF5,argNum=25,argStr=snappydata,isException=false"
            io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar
            threadGroups = snappyThreads;

//Access them through smart-connector mode
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSparkJob
            io.snappydata.hydra.cluster.SnappyPrms-sparkJobClassNames = io.snappydata.hydra.deployPkgUDF.AccessUdfSparkApp
            io.snappydata.hydra.cluster.SnappyPrms-userAppArgs = "MyUDF3 MyUDF4 MyUDF5 25 snappydata false "
            threadGroups = snappyThreads
            ;

//drop the user provided udfs.
INITTASK    taskClass = io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployTest taskMethod  = HydraTask_dropFunction
            io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployPrms-udfName = MyUDF3 MyUDF4 MyUDF5 MyUDF6 MyUDF7
            threadGroups = leadThreads
            ;

//Access the created functions again
//Access them through snappy-job, this time they should get exception
INITTASK    taskClass = io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployTest taskMethod  = HydraTask_executeUDFFunction
            io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployPrms-udfName = MyUDF3 MyUDF4 MyUDF5
            io.snappydata.hydra.deployPkgUDF.SnappyDeployUnDeployPrms-isExpectedExecption = true
            threadGroups = leadThreads
            ;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.hydra.deployPkgUDF.AccessUdfSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "udf1=MyUDF3,udf2=MyUDF4,udf3=MyUDF5,argNum=25,argStr=snappydata,isException=true"
            io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar
            threadGroups = snappyThreads;

//Access them through smart-connector mode
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSparkJob
            io.snappydata.hydra.cluster.SnappyPrms-sparkJobClassNames = io.snappydata.hydra.deployPkgUDF.AccessUdfSparkApp
            io.snappydata.hydra.cluster.SnappyPrms-userAppArgs = "MyUDF3 MyUDF4 MyUDF5 25 snappydata true"
            threadGroups = snappyThreads
            ;

INCLUDE $JTESTS/io/snappydata/hydra/northwind/stopDualModeCluster.conf;

hydra.Prms-totalTaskTimeSec           = 900;
hydra.Prms-maxResultWaitSec           = 3600;
io.snappydata.hydra.cluster.SnappyPrms-serverMemory = 4g;
io.snappydata.hydra.cluster.SnappyPrms-forceStart = true;
io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
